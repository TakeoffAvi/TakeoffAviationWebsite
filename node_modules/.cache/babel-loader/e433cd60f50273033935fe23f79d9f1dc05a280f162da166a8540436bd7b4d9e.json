{"ast":null,"code":"import { __rest, __assign } from 'tslib';\n\n/**\r\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\r\n * element, so even though these handlers might all be triggered by different\r\n * observers, we can keep them in the same map.\r\n */\nvar observerCallbacks = new WeakMap();\n/**\r\n * Multiple observers can be created for multiple element/document roots. Each with\r\n * different settings. So here we store dictionaries of observers to each root,\r\n * using serialised settings (threshold/margin) as lookup keys.\r\n */\nvar observers = new WeakMap();\nvar fireObserverCallback = function (entry) {\n  var _a;\n  (_a = observerCallbacks.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);\n};\nvar fireAllObserverCallbacks = function (entries) {\n  entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver(_a) {\n  var root = _a.root,\n    options = __rest(_a, [\"root\"]);\n  var lookupRoot = root || document;\n  /**\r\n   * If we don't have an observer lookup map for this root, create one.\r\n   */\n  if (!observers.has(lookupRoot)) {\n    observers.set(lookupRoot, {});\n  }\n  var rootObservers = observers.get(lookupRoot);\n  var key = JSON.stringify(options);\n  /**\r\n   * If we don't have an observer for this combination of root and settings,\r\n   * create one.\r\n   */\n  if (!rootObservers[key]) {\n    rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, __assign({\n      root: root\n    }, options));\n  }\n  return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n  var rootInteresectionObserver = initIntersectionObserver(options);\n  observerCallbacks.set(element, callback);\n  rootInteresectionObserver.observe(element);\n  return function () {\n    observerCallbacks.delete(element);\n    rootInteresectionObserver.unobserve(element);\n  };\n}\nexport { observeIntersection };","map":{"version":3,"names":["__rest","__assign","observerCallbacks","WeakMap","observers","fireObserverCallback","entry","_a","get","target","fireAllObserverCallbacks","entries","forEach","initIntersectionObserver","root","options","lookupRoot","document","has","set","rootObservers","key","JSON","stringify","IntersectionObserver","observeIntersection","element","callback","rootInteresectionObserver","observe","delete","unobserve"],"sources":["C:/Users/Shaikh Mohammed Saud/Documents/GitHub/Aviation_final/node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs"],"sourcesContent":["import { __rest, __assign } from 'tslib';\r\n\r\n/**\r\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\r\n * element, so even though these handlers might all be triggered by different\r\n * observers, we can keep them in the same map.\r\n */\r\nvar observerCallbacks = new WeakMap();\r\n/**\r\n * Multiple observers can be created for multiple element/document roots. Each with\r\n * different settings. So here we store dictionaries of observers to each root,\r\n * using serialised settings (threshold/margin) as lookup keys.\r\n */\r\nvar observers = new WeakMap();\r\nvar fireObserverCallback = function (entry) {\r\n    var _a;\r\n    (_a = observerCallbacks.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);\r\n};\r\nvar fireAllObserverCallbacks = function (entries) {\r\n    entries.forEach(fireObserverCallback);\r\n};\r\nfunction initIntersectionObserver(_a) {\r\n    var root = _a.root, options = __rest(_a, [\"root\"]);\r\n    var lookupRoot = root || document;\r\n    /**\r\n     * If we don't have an observer lookup map for this root, create one.\r\n     */\r\n    if (!observers.has(lookupRoot)) {\r\n        observers.set(lookupRoot, {});\r\n    }\r\n    var rootObservers = observers.get(lookupRoot);\r\n    var key = JSON.stringify(options);\r\n    /**\r\n     * If we don't have an observer for this combination of root and settings,\r\n     * create one.\r\n     */\r\n    if (!rootObservers[key]) {\r\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, __assign({ root: root }, options));\r\n    }\r\n    return rootObservers[key];\r\n}\r\nfunction observeIntersection(element, options, callback) {\r\n    var rootInteresectionObserver = initIntersectionObserver(options);\r\n    observerCallbacks.set(element, callback);\r\n    rootInteresectionObserver.observe(element);\r\n    return function () {\r\n        observerCallbacks.delete(element);\r\n        rootInteresectionObserver.unobserve(element);\r\n    };\r\n}\r\n\r\nexport { observeIntersection };\r\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,OAAO;;AAExC;AACA;AACA;AACA;AACA;AACA,IAAIC,iBAAiB,GAAG,IAAIC,OAAO,CAAC,CAAC;AACrC;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAG,IAAID,OAAO,CAAC,CAAC;AAC7B,IAAIE,oBAAoB,GAAG,SAAAA,CAAUC,KAAK,EAAE;EACxC,IAAIC,EAAE;EACN,CAACA,EAAE,GAAGL,iBAAiB,CAACM,GAAG,CAACF,KAAK,CAACG,MAAM,CAAC,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACD,KAAK,CAAC;AAC7F,CAAC;AACD,IAAII,wBAAwB,GAAG,SAAAA,CAAUC,OAAO,EAAE;EAC9CA,OAAO,CAACC,OAAO,CAACP,oBAAoB,CAAC;AACzC,CAAC;AACD,SAASQ,wBAAwBA,CAACN,EAAE,EAAE;EAClC,IAAIO,IAAI,GAAGP,EAAE,CAACO,IAAI;IAAEC,OAAO,GAAGf,MAAM,CAACO,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC;EAClD,IAAIS,UAAU,GAAGF,IAAI,IAAIG,QAAQ;EACjC;AACJ;AACA;EACI,IAAI,CAACb,SAAS,CAACc,GAAG,CAACF,UAAU,CAAC,EAAE;IAC5BZ,SAAS,CAACe,GAAG,CAACH,UAAU,EAAE,CAAC,CAAC,CAAC;EACjC;EACA,IAAII,aAAa,GAAGhB,SAAS,CAACI,GAAG,CAACQ,UAAU,CAAC;EAC7C,IAAIK,GAAG,GAAGC,IAAI,CAACC,SAAS,CAACR,OAAO,CAAC;EACjC;AACJ;AACA;AACA;EACI,IAAI,CAACK,aAAa,CAACC,GAAG,CAAC,EAAE;IACrBD,aAAa,CAACC,GAAG,CAAC,GAAG,IAAIG,oBAAoB,CAACd,wBAAwB,EAAET,QAAQ,CAAC;MAAEa,IAAI,EAAEA;IAAK,CAAC,EAAEC,OAAO,CAAC,CAAC;EAC9G;EACA,OAAOK,aAAa,CAACC,GAAG,CAAC;AAC7B;AACA,SAASI,mBAAmBA,CAACC,OAAO,EAAEX,OAAO,EAAEY,QAAQ,EAAE;EACrD,IAAIC,yBAAyB,GAAGf,wBAAwB,CAACE,OAAO,CAAC;EACjEb,iBAAiB,CAACiB,GAAG,CAACO,OAAO,EAAEC,QAAQ,CAAC;EACxCC,yBAAyB,CAACC,OAAO,CAACH,OAAO,CAAC;EAC1C,OAAO,YAAY;IACfxB,iBAAiB,CAAC4B,MAAM,CAACJ,OAAO,CAAC;IACjCE,yBAAyB,CAACG,SAAS,CAACL,OAAO,CAAC;EAChD,CAAC;AACL;AAEA,SAASD,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}