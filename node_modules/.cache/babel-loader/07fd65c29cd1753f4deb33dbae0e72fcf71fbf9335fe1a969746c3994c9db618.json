{"ast":null,"code":"import { useEffect } from 'react';\nfunction addDomEvent(target, eventName, handler, options) {\n  if (options === void 0) {\n    options = {\n      passive: true\n    };\n  }\n  target.addEventListener(eventName, handler, options);\n  return function () {\n    return target.removeEventListener(eventName, handler);\n  };\n}\n/**\r\n * Attaches an event listener directly to the provided DOM element.\r\n *\r\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\r\n * event handlers.\r\n *\r\n * ```jsx\r\n * const ref = useRef(null)\r\n *\r\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\r\n *\r\n * return <div ref={ref} />\r\n * ```\r\n *\r\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\r\n * @param eventName - Name of the event you want listen for.\r\n * @param handler - Function to fire when receiving the event.\r\n * @param options - Options to pass to `Event.addEventListener`.\r\n *\r\n * @public\r\n */\nfunction useDomEvent(ref, eventName, handler, options) {\n  useEffect(function () {\n    var element = ref.current;\n    if (handler && element) {\n      return addDomEvent(element, eventName, handler, options);\n    }\n  }, [ref, eventName, handler, options]);\n}\nexport { addDomEvent, useDomEvent };","map":{"version":3,"names":["useEffect","addDomEvent","target","eventName","handler","options","passive","addEventListener","removeEventListener","useDomEvent","ref","element","current"],"sources":["D:/Manish/TakeoffAviationWebsite/node_modules/framer-motion/dist/es/events/use-dom-event.mjs"],"sourcesContent":["import { useEffect } from 'react';\r\n\r\nfunction addDomEvent(target, eventName, handler, options) {\r\n    if (options === void 0) { options = { passive: true }; }\r\n    target.addEventListener(eventName, handler, options);\r\n    return function () { return target.removeEventListener(eventName, handler); };\r\n}\r\n/**\r\n * Attaches an event listener directly to the provided DOM element.\r\n *\r\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\r\n * event handlers.\r\n *\r\n * ```jsx\r\n * const ref = useRef(null)\r\n *\r\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\r\n *\r\n * return <div ref={ref} />\r\n * ```\r\n *\r\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\r\n * @param eventName - Name of the event you want listen for.\r\n * @param handler - Function to fire when receiving the event.\r\n * @param options - Options to pass to `Event.addEventListener`.\r\n *\r\n * @public\r\n */\r\nfunction useDomEvent(ref, eventName, handler, options) {\r\n    useEffect(function () {\r\n        var element = ref.current;\r\n        if (handler && element) {\r\n            return addDomEvent(element, eventName, handler, options);\r\n        }\r\n    }, [ref, eventName, handler, options]);\r\n}\r\n\r\nexport { addDomEvent, useDomEvent };\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,SAASC,WAAWA,CAACC,MAAM,EAAEC,SAAS,EAAEC,OAAO,EAAEC,OAAO,EAAE;EACtD,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG;MAAEC,OAAO,EAAE;IAAK,CAAC;EAAE;EACvDJ,MAAM,CAACK,gBAAgB,CAACJ,SAAS,EAAEC,OAAO,EAAEC,OAAO,CAAC;EACpD,OAAO,YAAY;IAAE,OAAOH,MAAM,CAACM,mBAAmB,CAACL,SAAS,EAAEC,OAAO,CAAC;EAAE,CAAC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,WAAWA,CAACC,GAAG,EAAEP,SAAS,EAAEC,OAAO,EAAEC,OAAO,EAAE;EACnDL,SAAS,CAAC,YAAY;IAClB,IAAIW,OAAO,GAAGD,GAAG,CAACE,OAAO;IACzB,IAAIR,OAAO,IAAIO,OAAO,EAAE;MACpB,OAAOV,WAAW,CAACU,OAAO,EAAER,SAAS,EAAEC,OAAO,EAAEC,OAAO,CAAC;IAC5D;EACJ,CAAC,EAAE,CAACK,GAAG,EAAEP,SAAS,EAAEC,OAAO,EAAEC,OAAO,CAAC,CAAC;AAC1C;AAEA,SAASJ,WAAW,EAAEQ,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}