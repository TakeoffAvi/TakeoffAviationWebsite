{"ast":null,"code":"import { __spreadArray, __read, __assign, __rest } from 'tslib';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { animateVisualElement } from './animation.mjs';\nimport { AnimationType } from './types.mjs';\nimport { isVariantLabels, resolveVariant, isVariantLabel } from './variants.mjs';\nvar variantPriorityOrder = [AnimationType.Animate, AnimationType.InView, AnimationType.Focus, AnimationType.Hover, AnimationType.Tap, AnimationType.Drag, AnimationType.Exit];\nvar reversePriorityOrder = __spreadArray([], __read(variantPriorityOrder), false).reverse();\nvar numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n  return function (animations) {\n    return Promise.all(animations.map(function (_a) {\n      var animation = _a.animation,\n        options = _a.options;\n      return animateVisualElement(visualElement, animation, options);\n    }));\n  };\n}\nfunction createAnimationState(visualElement) {\n  var animate = animateList(visualElement);\n  var state = createState();\n  var allAnimatedKeys = {};\n  var isInitialRender = true;\n  /**\r\n   * This function will be used to reduce the animation definitions for\r\n   * each active animation type into an object of resolved values for it.\r\n   */\n  var buildResolvedTypeValues = function (acc, definition) {\n    var resolved = resolveVariant(visualElement, definition);\n    if (resolved) {\n      resolved.transition;\n      var transitionEnd = resolved.transitionEnd,\n        target = __rest(resolved, [\"transition\", \"transitionEnd\"]);\n      acc = __assign(__assign(__assign({}, acc), target), transitionEnd);\n    }\n    return acc;\n  };\n  function isAnimated(key) {\n    return allAnimatedKeys[key] !== undefined;\n  }\n  /**\r\n   * This just allows us to inject mocked animation functions\r\n   * @internal\r\n   */\n  function setAnimateFunction(makeAnimator) {\n    animate = makeAnimator(visualElement);\n  }\n  /**\r\n   * When we receive new props, we need to:\r\n   * 1. Create a list of protected keys for each type. This is a directory of\r\n   *    value keys that are currently being \"handled\" by types of a higher priority\r\n   *    so that whenever an animation is played of a given type, these values are\r\n   *    protected from being animated.\r\n   * 2. Determine if an animation type needs animating.\r\n   * 3. Determine if any values have been removed from a type and figure out\r\n   *    what to animate those to.\r\n   */\n  function animateChanges(options, changedActiveType) {\n    var _a;\n    var props = visualElement.getProps();\n    var context = visualElement.getVariantContext(true) || {};\n    /**\r\n     * A list of animations that we'll build into as we iterate through the animation\r\n     * types. This will get executed at the end of the function.\r\n     */\n    var animations = [];\n    /**\r\n     * Keep track of which values have been removed. Then, as we hit lower priority\r\n     * animation types, we can check if they contain removed values and animate to that.\r\n     */\n    var removedKeys = new Set();\n    /**\r\n     * A dictionary of all encountered keys. This is an object to let us build into and\r\n     * copy it without iteration. Each time we hit an animation type we set its protected\r\n     * keys - the keys its not allowed to animate - to the latest version of this object.\r\n     */\n    var encounteredKeys = {};\n    /**\r\n     * If a variant has been removed at a given index, and this component is controlling\r\n     * variant animations, we want to ensure lower-priority variants are forced to animate.\r\n     */\n    var removedVariantIndex = Infinity;\n    var _loop_1 = function (i) {\n      var type = reversePriorityOrder[i];\n      var typeState = state[type];\n      var prop = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];\n      var propIsVariant = isVariantLabel(prop);\n      /**\r\n       * If this type has *just* changed isActive status, set activeDelta\r\n       * to that status. Otherwise set to null.\r\n       */\n      var activeDelta = type === changedActiveType ? typeState.isActive : null;\n      if (activeDelta === false) removedVariantIndex = i;\n      /**\r\n       * If this prop is an inherited variant, rather than been set directly on the\r\n       * component itself, we want to make sure we allow the parent to trigger animations.\r\n       *\r\n       * TODO: Can probably change this to a !isControllingVariants check\r\n       */\n      var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n      /**\r\n       *\r\n       */\n      if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {\n        isInherited = false;\n      }\n      /**\r\n       * Set all encountered keys so far as the protected keys for this type. This will\r\n       * be any key that has been animated or otherwise handled by active, higher-priortiy types.\r\n       */\n      typeState.protectedKeys = __assign({}, encounteredKeys);\n      // Check if we can skip analysing this prop early\n      if (\n      // If it isn't active and hasn't *just* been set as inactive\n      !typeState.isActive && activeDelta === null ||\n      // If we didn't and don't have any defined prop for this animation type\n      !prop && !typeState.prevProp ||\n      // Or if the prop doesn't define an animation\n      isAnimationControls(prop) || typeof prop === \"boolean\") {\n        return \"continue\";\n      }\n      /**\r\n       * As we go look through the values defined on this type, if we detect\r\n       * a changed value or a value that was removed in a higher priority, we set\r\n       * this to true and add this prop to the animation list.\r\n       */\n      var variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n      var shouldAnimateType = variantDidChange ||\n      // If we're making this variant active, we want to always make it active\n      type === changedActiveType && typeState.isActive && !isInherited && propIsVariant ||\n      // If we removed a higher-priority variant (i is in reverse order)\n      i > removedVariantIndex && propIsVariant;\n      /**\r\n       * As animations can be set as variant lists, variants or target objects, we\r\n       * coerce everything to an array if it isn't one already\r\n       */\n      var definitionList = Array.isArray(prop) ? prop : [prop];\n      /**\r\n       * Build an object of all the resolved values. We'll use this in the subsequent\r\n       * animateChanges calls to determine whether a value has changed.\r\n       */\n      var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n      if (activeDelta === false) resolvedValues = {};\n      /**\r\n       * Now we need to loop through all the keys in the prev prop and this prop,\r\n       * and decide:\r\n       * 1. If the value has changed, and needs animating\r\n       * 2. If it has been removed, and needs adding to the removedKeys set\r\n       * 3. If it has been removed in a higher priority type and needs animating\r\n       * 4. If it hasn't been removed in a higher priority but hasn't changed, and\r\n       *    needs adding to the type's protectedKeys list.\r\n       */\n      var _b = typeState.prevResolvedValues,\n        prevResolvedValues = _b === void 0 ? {} : _b;\n      var allKeys = __assign(__assign({}, prevResolvedValues), resolvedValues);\n      var markToAnimate = function (key) {\n        shouldAnimateType = true;\n        removedKeys.delete(key);\n        typeState.needsAnimating[key] = true;\n      };\n      for (var key in allKeys) {\n        var next = resolvedValues[key];\n        var prev = prevResolvedValues[key];\n        // If we've already handled this we can just skip ahead\n        if (encounteredKeys.hasOwnProperty(key)) continue;\n        /**\r\n         * If the value has changed, we probably want to animate it.\r\n         */\n        if (next !== prev) {\n          /**\r\n           * If both values are keyframes, we need to shallow compare them to\r\n           * detect whether any value has changed. If it has, we animate it.\r\n           */\n          if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n            if (!shallowCompare(next, prev) || variantDidChange) {\n              markToAnimate(key);\n            } else {\n              /**\r\n               * If it hasn't changed, we want to ensure it doesn't animate by\r\n               * adding it to the list of protected keys.\r\n               */\n              typeState.protectedKeys[key] = true;\n            }\n          } else if (next !== undefined) {\n            // If next is defined and doesn't equal prev, it needs animating\n            markToAnimate(key);\n          } else {\n            // If it's undefined, it's been removed.\n            removedKeys.add(key);\n          }\n        } else if (next !== undefined && removedKeys.has(key)) {\n          /**\r\n           * If next hasn't changed and it isn't undefined, we want to check if it's\r\n           * been removed by a higher priority\r\n           */\n          markToAnimate(key);\n        } else {\n          /**\r\n           * If it hasn't changed, we add it to the list of protected values\r\n           * to ensure it doesn't get animated.\r\n           */\n          typeState.protectedKeys[key] = true;\n        }\n      }\n      /**\r\n       * Update the typeState so next time animateChanges is called we can compare the\r\n       * latest prop and resolvedValues to these.\r\n       */\n      typeState.prevProp = prop;\n      typeState.prevResolvedValues = resolvedValues;\n      /**\r\n       *\r\n       */\n      if (typeState.isActive) {\n        encounteredKeys = __assign(__assign({}, encounteredKeys), resolvedValues);\n      }\n      if (isInitialRender && visualElement.blockInitialAnimation) {\n        shouldAnimateType = false;\n      }\n      /**\r\n       * If this is an inherited prop we want to hard-block animations\r\n       * TODO: Test as this should probably still handle animations triggered\r\n       * by removed values?\r\n       */\n      if (shouldAnimateType && !isInherited) {\n        animations.push.apply(animations, __spreadArray([], __read(definitionList.map(function (animation) {\n          return {\n            animation: animation,\n            options: __assign({\n              type: type\n            }, options)\n          };\n        })), false));\n      }\n    };\n    /**\r\n     * Iterate through all animation types in reverse priority order. For each, we want to\r\n     * detect which values it's handling and whether or not they've changed (and therefore\r\n     * need to be animated). If any values have been removed, we want to detect those in\r\n     * lower priority props and flag for animation.\r\n     */\n    for (var i = 0; i < numAnimationTypes; i++) {\n      _loop_1(i);\n    }\n    allAnimatedKeys = __assign({}, encounteredKeys);\n    /**\r\n     * If there are some removed value that haven't been dealt with,\r\n     * we need to create a new animation that falls back either to the value\r\n     * defined in the style prop, or the last read value.\r\n     */\n    if (removedKeys.size) {\n      var fallbackAnimation_1 = {};\n      removedKeys.forEach(function (key) {\n        var fallbackTarget = visualElement.getBaseTarget(key);\n        if (fallbackTarget !== undefined) {\n          fallbackAnimation_1[key] = fallbackTarget;\n        }\n      });\n      animations.push({\n        animation: fallbackAnimation_1\n      });\n    }\n    var shouldAnimate = Boolean(animations.length);\n    if (isInitialRender && props.initial === false && !visualElement.manuallyAnimateOnMount) {\n      shouldAnimate = false;\n    }\n    isInitialRender = false;\n    return shouldAnimate ? animate(animations) : Promise.resolve();\n  }\n  /**\r\n   * Change whether a certain animation type is active.\r\n   */\n  function setActive(type, isActive, options) {\n    var _a;\n    // If the active state hasn't changed, we can safely do nothing here\n    if (state[type].isActive === isActive) return Promise.resolve();\n    // Propagate active change to children\n    (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {\n      var _a;\n      return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive);\n    });\n    state[type].isActive = isActive;\n    var animations = animateChanges(options, type);\n    for (var key in state) {\n      state[key].protectedKeys = {};\n    }\n    return animations;\n  }\n  return {\n    isAnimated: isAnimated,\n    animateChanges: animateChanges,\n    setActive: setActive,\n    setAnimateFunction: setAnimateFunction,\n    getState: function () {\n      return state;\n    }\n  };\n}\nfunction checkVariantsDidChange(prev, next) {\n  if (typeof next === \"string\") {\n    return next !== prev;\n  } else if (isVariantLabels(next)) {\n    return !shallowCompare(next, prev);\n  }\n  return false;\n}\nfunction createTypeState(isActive) {\n  if (isActive === void 0) {\n    isActive = false;\n  }\n  return {\n    isActive: isActive,\n    protectedKeys: {},\n    needsAnimating: {},\n    prevResolvedValues: {}\n  };\n}\nfunction createState() {\n  var _a;\n  return _a = {}, _a[AnimationType.Animate] = createTypeState(true), _a[AnimationType.InView] = createTypeState(), _a[AnimationType.Hover] = createTypeState(), _a[AnimationType.Tap] = createTypeState(), _a[AnimationType.Drag] = createTypeState(), _a[AnimationType.Focus] = createTypeState(), _a[AnimationType.Exit] = createTypeState(), _a;\n}\nexport { checkVariantsDidChange, createAnimationState, variantPriorityOrder };","map":{"version":3,"names":["__spreadArray","__read","__assign","__rest","isAnimationControls","isKeyframesTarget","shallowCompare","animateVisualElement","AnimationType","isVariantLabels","resolveVariant","isVariantLabel","variantPriorityOrder","Animate","InView","Focus","Hover","Tap","Drag","Exit","reversePriorityOrder","reverse","numAnimationTypes","length","animateList","visualElement","animations","Promise","all","map","_a","animation","options","createAnimationState","animate","state","createState","allAnimatedKeys","isInitialRender","buildResolvedTypeValues","acc","definition","resolved","transition","transitionEnd","target","isAnimated","key","undefined","setAnimateFunction","makeAnimator","animateChanges","changedActiveType","props","getProps","context","getVariantContext","removedKeys","Set","encounteredKeys","removedVariantIndex","Infinity","_loop_1","i","type","typeState","prop","propIsVariant","activeDelta","isActive","isInherited","manuallyAnimateOnMount","protectedKeys","prevProp","variantDidChange","checkVariantsDidChange","shouldAnimateType","definitionList","Array","isArray","resolvedValues","reduce","_b","prevResolvedValues","allKeys","markToAnimate","delete","needsAnimating","next","prev","hasOwnProperty","add","has","blockInitialAnimation","push","apply","size","fallbackAnimation_1","forEach","fallbackTarget","getBaseTarget","shouldAnimate","Boolean","initial","resolve","setActive","variantChildren","child","animationState","getState","createTypeState"],"sources":["C:/Users/Shaikh Mohammed Saud/Documents/GitHub/Aviation_final/node_modules/framer-motion/dist/es/render/utils/animation-state.mjs"],"sourcesContent":["import { __spreadArray, __read, __assign, __rest } from 'tslib';\r\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\r\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\r\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\r\nimport { animateVisualElement } from './animation.mjs';\r\nimport { AnimationType } from './types.mjs';\r\nimport { isVariantLabels, resolveVariant, isVariantLabel } from './variants.mjs';\r\n\r\nvar variantPriorityOrder = [\r\n    AnimationType.Animate,\r\n    AnimationType.InView,\r\n    AnimationType.Focus,\r\n    AnimationType.Hover,\r\n    AnimationType.Tap,\r\n    AnimationType.Drag,\r\n    AnimationType.Exit,\r\n];\r\nvar reversePriorityOrder = __spreadArray([], __read(variantPriorityOrder), false).reverse();\r\nvar numAnimationTypes = variantPriorityOrder.length;\r\nfunction animateList(visualElement) {\r\n    return function (animations) {\r\n        return Promise.all(animations.map(function (_a) {\r\n            var animation = _a.animation, options = _a.options;\r\n            return animateVisualElement(visualElement, animation, options);\r\n        }));\r\n    };\r\n}\r\nfunction createAnimationState(visualElement) {\r\n    var animate = animateList(visualElement);\r\n    var state = createState();\r\n    var allAnimatedKeys = {};\r\n    var isInitialRender = true;\r\n    /**\r\n     * This function will be used to reduce the animation definitions for\r\n     * each active animation type into an object of resolved values for it.\r\n     */\r\n    var buildResolvedTypeValues = function (acc, definition) {\r\n        var resolved = resolveVariant(visualElement, definition);\r\n        if (resolved) {\r\n            resolved.transition; var transitionEnd = resolved.transitionEnd, target = __rest(resolved, [\"transition\", \"transitionEnd\"]);\r\n            acc = __assign(__assign(__assign({}, acc), target), transitionEnd);\r\n        }\r\n        return acc;\r\n    };\r\n    function isAnimated(key) {\r\n        return allAnimatedKeys[key] !== undefined;\r\n    }\r\n    /**\r\n     * This just allows us to inject mocked animation functions\r\n     * @internal\r\n     */\r\n    function setAnimateFunction(makeAnimator) {\r\n        animate = makeAnimator(visualElement);\r\n    }\r\n    /**\r\n     * When we receive new props, we need to:\r\n     * 1. Create a list of protected keys for each type. This is a directory of\r\n     *    value keys that are currently being \"handled\" by types of a higher priority\r\n     *    so that whenever an animation is played of a given type, these values are\r\n     *    protected from being animated.\r\n     * 2. Determine if an animation type needs animating.\r\n     * 3. Determine if any values have been removed from a type and figure out\r\n     *    what to animate those to.\r\n     */\r\n    function animateChanges(options, changedActiveType) {\r\n        var _a;\r\n        var props = visualElement.getProps();\r\n        var context = visualElement.getVariantContext(true) || {};\r\n        /**\r\n         * A list of animations that we'll build into as we iterate through the animation\r\n         * types. This will get executed at the end of the function.\r\n         */\r\n        var animations = [];\r\n        /**\r\n         * Keep track of which values have been removed. Then, as we hit lower priority\r\n         * animation types, we can check if they contain removed values and animate to that.\r\n         */\r\n        var removedKeys = new Set();\r\n        /**\r\n         * A dictionary of all encountered keys. This is an object to let us build into and\r\n         * copy it without iteration. Each time we hit an animation type we set its protected\r\n         * keys - the keys its not allowed to animate - to the latest version of this object.\r\n         */\r\n        var encounteredKeys = {};\r\n        /**\r\n         * If a variant has been removed at a given index, and this component is controlling\r\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\r\n         */\r\n        var removedVariantIndex = Infinity;\r\n        var _loop_1 = function (i) {\r\n            var type = reversePriorityOrder[i];\r\n            var typeState = state[type];\r\n            var prop = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];\r\n            var propIsVariant = isVariantLabel(prop);\r\n            /**\r\n             * If this type has *just* changed isActive status, set activeDelta\r\n             * to that status. Otherwise set to null.\r\n             */\r\n            var activeDelta = type === changedActiveType ? typeState.isActive : null;\r\n            if (activeDelta === false)\r\n                removedVariantIndex = i;\r\n            /**\r\n             * If this prop is an inherited variant, rather than been set directly on the\r\n             * component itself, we want to make sure we allow the parent to trigger animations.\r\n             *\r\n             * TODO: Can probably change this to a !isControllingVariants check\r\n             */\r\n            var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\r\n            /**\r\n             *\r\n             */\r\n            if (isInherited &&\r\n                isInitialRender &&\r\n                visualElement.manuallyAnimateOnMount) {\r\n                isInherited = false;\r\n            }\r\n            /**\r\n             * Set all encountered keys so far as the protected keys for this type. This will\r\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\r\n             */\r\n            typeState.protectedKeys = __assign({}, encounteredKeys);\r\n            // Check if we can skip analysing this prop early\r\n            if (\r\n            // If it isn't active and hasn't *just* been set as inactive\r\n            (!typeState.isActive && activeDelta === null) ||\r\n                // If we didn't and don't have any defined prop for this animation type\r\n                (!prop && !typeState.prevProp) ||\r\n                // Or if the prop doesn't define an animation\r\n                isAnimationControls(prop) ||\r\n                typeof prop === \"boolean\") {\r\n                return \"continue\";\r\n            }\r\n            /**\r\n             * As we go look through the values defined on this type, if we detect\r\n             * a changed value or a value that was removed in a higher priority, we set\r\n             * this to true and add this prop to the animation list.\r\n             */\r\n            var variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\r\n            var shouldAnimateType = variantDidChange ||\r\n                // If we're making this variant active, we want to always make it active\r\n                (type === changedActiveType &&\r\n                    typeState.isActive &&\r\n                    !isInherited &&\r\n                    propIsVariant) ||\r\n                // If we removed a higher-priority variant (i is in reverse order)\r\n                (i > removedVariantIndex && propIsVariant);\r\n            /**\r\n             * As animations can be set as variant lists, variants or target objects, we\r\n             * coerce everything to an array if it isn't one already\r\n             */\r\n            var definitionList = Array.isArray(prop) ? prop : [prop];\r\n            /**\r\n             * Build an object of all the resolved values. We'll use this in the subsequent\r\n             * animateChanges calls to determine whether a value has changed.\r\n             */\r\n            var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\r\n            if (activeDelta === false)\r\n                resolvedValues = {};\r\n            /**\r\n             * Now we need to loop through all the keys in the prev prop and this prop,\r\n             * and decide:\r\n             * 1. If the value has changed, and needs animating\r\n             * 2. If it has been removed, and needs adding to the removedKeys set\r\n             * 3. If it has been removed in a higher priority type and needs animating\r\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\r\n             *    needs adding to the type's protectedKeys list.\r\n             */\r\n            var _b = typeState.prevResolvedValues, prevResolvedValues = _b === void 0 ? {} : _b;\r\n            var allKeys = __assign(__assign({}, prevResolvedValues), resolvedValues);\r\n            var markToAnimate = function (key) {\r\n                shouldAnimateType = true;\r\n                removedKeys.delete(key);\r\n                typeState.needsAnimating[key] = true;\r\n            };\r\n            for (var key in allKeys) {\r\n                var next = resolvedValues[key];\r\n                var prev = prevResolvedValues[key];\r\n                // If we've already handled this we can just skip ahead\r\n                if (encounteredKeys.hasOwnProperty(key))\r\n                    continue;\r\n                /**\r\n                 * If the value has changed, we probably want to animate it.\r\n                 */\r\n                if (next !== prev) {\r\n                    /**\r\n                     * If both values are keyframes, we need to shallow compare them to\r\n                     * detect whether any value has changed. If it has, we animate it.\r\n                     */\r\n                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\r\n                        if (!shallowCompare(next, prev) || variantDidChange) {\r\n                            markToAnimate(key);\r\n                        }\r\n                        else {\r\n                            /**\r\n                             * If it hasn't changed, we want to ensure it doesn't animate by\r\n                             * adding it to the list of protected keys.\r\n                             */\r\n                            typeState.protectedKeys[key] = true;\r\n                        }\r\n                    }\r\n                    else if (next !== undefined) {\r\n                        // If next is defined and doesn't equal prev, it needs animating\r\n                        markToAnimate(key);\r\n                    }\r\n                    else {\r\n                        // If it's undefined, it's been removed.\r\n                        removedKeys.add(key);\r\n                    }\r\n                }\r\n                else if (next !== undefined && removedKeys.has(key)) {\r\n                    /**\r\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\r\n                     * been removed by a higher priority\r\n                     */\r\n                    markToAnimate(key);\r\n                }\r\n                else {\r\n                    /**\r\n                     * If it hasn't changed, we add it to the list of protected values\r\n                     * to ensure it doesn't get animated.\r\n                     */\r\n                    typeState.protectedKeys[key] = true;\r\n                }\r\n            }\r\n            /**\r\n             * Update the typeState so next time animateChanges is called we can compare the\r\n             * latest prop and resolvedValues to these.\r\n             */\r\n            typeState.prevProp = prop;\r\n            typeState.prevResolvedValues = resolvedValues;\r\n            /**\r\n             *\r\n             */\r\n            if (typeState.isActive) {\r\n                encounteredKeys = __assign(__assign({}, encounteredKeys), resolvedValues);\r\n            }\r\n            if (isInitialRender && visualElement.blockInitialAnimation) {\r\n                shouldAnimateType = false;\r\n            }\r\n            /**\r\n             * If this is an inherited prop we want to hard-block animations\r\n             * TODO: Test as this should probably still handle animations triggered\r\n             * by removed values?\r\n             */\r\n            if (shouldAnimateType && !isInherited) {\r\n                animations.push.apply(animations, __spreadArray([], __read(definitionList.map(function (animation) { return ({\r\n                    animation: animation,\r\n                    options: __assign({ type: type }, options),\r\n                }); })), false));\r\n            }\r\n        };\r\n        /**\r\n         * Iterate through all animation types in reverse priority order. For each, we want to\r\n         * detect which values it's handling and whether or not they've changed (and therefore\r\n         * need to be animated). If any values have been removed, we want to detect those in\r\n         * lower priority props and flag for animation.\r\n         */\r\n        for (var i = 0; i < numAnimationTypes; i++) {\r\n            _loop_1(i);\r\n        }\r\n        allAnimatedKeys = __assign({}, encounteredKeys);\r\n        /**\r\n         * If there are some removed value that haven't been dealt with,\r\n         * we need to create a new animation that falls back either to the value\r\n         * defined in the style prop, or the last read value.\r\n         */\r\n        if (removedKeys.size) {\r\n            var fallbackAnimation_1 = {};\r\n            removedKeys.forEach(function (key) {\r\n                var fallbackTarget = visualElement.getBaseTarget(key);\r\n                if (fallbackTarget !== undefined) {\r\n                    fallbackAnimation_1[key] = fallbackTarget;\r\n                }\r\n            });\r\n            animations.push({ animation: fallbackAnimation_1 });\r\n        }\r\n        var shouldAnimate = Boolean(animations.length);\r\n        if (isInitialRender &&\r\n            props.initial === false &&\r\n            !visualElement.manuallyAnimateOnMount) {\r\n            shouldAnimate = false;\r\n        }\r\n        isInitialRender = false;\r\n        return shouldAnimate ? animate(animations) : Promise.resolve();\r\n    }\r\n    /**\r\n     * Change whether a certain animation type is active.\r\n     */\r\n    function setActive(type, isActive, options) {\r\n        var _a;\r\n        // If the active state hasn't changed, we can safely do nothing here\r\n        if (state[type].isActive === isActive)\r\n            return Promise.resolve();\r\n        // Propagate active change to children\r\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function (child) { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\r\n        state[type].isActive = isActive;\r\n        var animations = animateChanges(options, type);\r\n        for (var key in state) {\r\n            state[key].protectedKeys = {};\r\n        }\r\n        return animations;\r\n    }\r\n    return {\r\n        isAnimated: isAnimated,\r\n        animateChanges: animateChanges,\r\n        setActive: setActive,\r\n        setAnimateFunction: setAnimateFunction,\r\n        getState: function () { return state; },\r\n    };\r\n}\r\nfunction checkVariantsDidChange(prev, next) {\r\n    if (typeof next === \"string\") {\r\n        return next !== prev;\r\n    }\r\n    else if (isVariantLabels(next)) {\r\n        return !shallowCompare(next, prev);\r\n    }\r\n    return false;\r\n}\r\nfunction createTypeState(isActive) {\r\n    if (isActive === void 0) { isActive = false; }\r\n    return {\r\n        isActive: isActive,\r\n        protectedKeys: {},\r\n        needsAnimating: {},\r\n        prevResolvedValues: {},\r\n    };\r\n}\r\nfunction createState() {\r\n    var _a;\r\n    return _a = {},\r\n        _a[AnimationType.Animate] = createTypeState(true),\r\n        _a[AnimationType.InView] = createTypeState(),\r\n        _a[AnimationType.Hover] = createTypeState(),\r\n        _a[AnimationType.Tap] = createTypeState(),\r\n        _a[AnimationType.Drag] = createTypeState(),\r\n        _a[AnimationType.Focus] = createTypeState(),\r\n        _a[AnimationType.Exit] = createTypeState(),\r\n        _a;\r\n}\r\n\r\nexport { checkVariantsDidChange, createAnimationState, variantPriorityOrder };\r\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/D,SAASC,mBAAmB,QAAQ,iDAAiD;AACrF,SAASC,iBAAiB,QAAQ,+CAA+C;AACjF,SAASC,cAAc,QAAQ,iCAAiC;AAChE,SAASC,oBAAoB,QAAQ,iBAAiB;AACtD,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,eAAe,EAAEC,cAAc,EAAEC,cAAc,QAAQ,gBAAgB;AAEhF,IAAIC,oBAAoB,GAAG,CACvBJ,aAAa,CAACK,OAAO,EACrBL,aAAa,CAACM,MAAM,EACpBN,aAAa,CAACO,KAAK,EACnBP,aAAa,CAACQ,KAAK,EACnBR,aAAa,CAACS,GAAG,EACjBT,aAAa,CAACU,IAAI,EAClBV,aAAa,CAACW,IAAI,CACrB;AACD,IAAIC,oBAAoB,GAAGpB,aAAa,CAAC,EAAE,EAAEC,MAAM,CAACW,oBAAoB,CAAC,EAAE,KAAK,CAAC,CAACS,OAAO,CAAC,CAAC;AAC3F,IAAIC,iBAAiB,GAAGV,oBAAoB,CAACW,MAAM;AACnD,SAASC,WAAWA,CAACC,aAAa,EAAE;EAChC,OAAO,UAAUC,UAAU,EAAE;IACzB,OAAOC,OAAO,CAACC,GAAG,CAACF,UAAU,CAACG,GAAG,CAAC,UAAUC,EAAE,EAAE;MAC5C,IAAIC,SAAS,GAAGD,EAAE,CAACC,SAAS;QAAEC,OAAO,GAAGF,EAAE,CAACE,OAAO;MAClD,OAAOzB,oBAAoB,CAACkB,aAAa,EAAEM,SAAS,EAAEC,OAAO,CAAC;IAClE,CAAC,CAAC,CAAC;EACP,CAAC;AACL;AACA,SAASC,oBAAoBA,CAACR,aAAa,EAAE;EACzC,IAAIS,OAAO,GAAGV,WAAW,CAACC,aAAa,CAAC;EACxC,IAAIU,KAAK,GAAGC,WAAW,CAAC,CAAC;EACzB,IAAIC,eAAe,GAAG,CAAC,CAAC;EACxB,IAAIC,eAAe,GAAG,IAAI;EAC1B;AACJ;AACA;AACA;EACI,IAAIC,uBAAuB,GAAG,SAAAA,CAAUC,GAAG,EAAEC,UAAU,EAAE;IACrD,IAAIC,QAAQ,GAAGhC,cAAc,CAACe,aAAa,EAAEgB,UAAU,CAAC;IACxD,IAAIC,QAAQ,EAAE;MACVA,QAAQ,CAACC,UAAU;MAAE,IAAIC,aAAa,GAAGF,QAAQ,CAACE,aAAa;QAAEC,MAAM,GAAG1C,MAAM,CAACuC,QAAQ,EAAE,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;MAC3HF,GAAG,GAAGtC,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEsC,GAAG,CAAC,EAAEK,MAAM,CAAC,EAAED,aAAa,CAAC;IACtE;IACA,OAAOJ,GAAG;EACd,CAAC;EACD,SAASM,UAAUA,CAACC,GAAG,EAAE;IACrB,OAAOV,eAAe,CAACU,GAAG,CAAC,KAAKC,SAAS;EAC7C;EACA;AACJ;AACA;AACA;EACI,SAASC,kBAAkBA,CAACC,YAAY,EAAE;IACtChB,OAAO,GAAGgB,YAAY,CAACzB,aAAa,CAAC;EACzC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAAS0B,cAAcA,CAACnB,OAAO,EAAEoB,iBAAiB,EAAE;IAChD,IAAItB,EAAE;IACN,IAAIuB,KAAK,GAAG5B,aAAa,CAAC6B,QAAQ,CAAC,CAAC;IACpC,IAAIC,OAAO,GAAG9B,aAAa,CAAC+B,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzD;AACR;AACA;AACA;IACQ,IAAI9B,UAAU,GAAG,EAAE;IACnB;AACR;AACA;AACA;IACQ,IAAI+B,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC3B;AACR;AACA;AACA;AACA;IACQ,IAAIC,eAAe,GAAG,CAAC,CAAC;IACxB;AACR;AACA;AACA;IACQ,IAAIC,mBAAmB,GAAGC,QAAQ;IAClC,IAAIC,OAAO,GAAG,SAAAA,CAAUC,CAAC,EAAE;MACvB,IAAIC,IAAI,GAAG5C,oBAAoB,CAAC2C,CAAC,CAAC;MAClC,IAAIE,SAAS,GAAG9B,KAAK,CAAC6B,IAAI,CAAC;MAC3B,IAAIE,IAAI,GAAG,CAACpC,EAAE,GAAGuB,KAAK,CAACW,IAAI,CAAC,MAAM,IAAI,IAAIlC,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGyB,OAAO,CAACS,IAAI,CAAC;MAC5E,IAAIG,aAAa,GAAGxD,cAAc,CAACuD,IAAI,CAAC;MACxC;AACZ;AACA;AACA;MACY,IAAIE,WAAW,GAAGJ,IAAI,KAAKZ,iBAAiB,GAAGa,SAAS,CAACI,QAAQ,GAAG,IAAI;MACxE,IAAID,WAAW,KAAK,KAAK,EACrBR,mBAAmB,GAAGG,CAAC;MAC3B;AACZ;AACA;AACA;AACA;AACA;MACY,IAAIO,WAAW,GAAGJ,IAAI,KAAKX,OAAO,CAACS,IAAI,CAAC,IAAIE,IAAI,KAAKb,KAAK,CAACW,IAAI,CAAC,IAAIG,aAAa;MACjF;AACZ;AACA;MACY,IAAIG,WAAW,IACXhC,eAAe,IACfb,aAAa,CAAC8C,sBAAsB,EAAE;QACtCD,WAAW,GAAG,KAAK;MACvB;MACA;AACZ;AACA;AACA;MACYL,SAAS,CAACO,aAAa,GAAGtE,QAAQ,CAAC,CAAC,CAAC,EAAEyD,eAAe,CAAC;MACvD;MACA;MACA;MACC,CAACM,SAAS,CAACI,QAAQ,IAAID,WAAW,KAAK,IAAI;MACxC;MACC,CAACF,IAAI,IAAI,CAACD,SAAS,CAACQ,QAAS;MAC9B;MACArE,mBAAmB,CAAC8D,IAAI,CAAC,IACzB,OAAOA,IAAI,KAAK,SAAS,EAAE;QAC3B,OAAO,UAAU;MACrB;MACA;AACZ;AACA;AACA;AACA;MACY,IAAIQ,gBAAgB,GAAGC,sBAAsB,CAACV,SAAS,CAACQ,QAAQ,EAAEP,IAAI,CAAC;MACvE,IAAIU,iBAAiB,GAAGF,gBAAgB;MACpC;MACCV,IAAI,KAAKZ,iBAAiB,IACvBa,SAAS,CAACI,QAAQ,IAClB,CAACC,WAAW,IACZH,aAAc;MAClB;MACCJ,CAAC,GAAGH,mBAAmB,IAAIO,aAAc;MAC9C;AACZ;AACA;AACA;MACY,IAAIU,cAAc,GAAGC,KAAK,CAACC,OAAO,CAACb,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC;MACxD;AACZ;AACA;AACA;MACY,IAAIc,cAAc,GAAGH,cAAc,CAACI,MAAM,CAAC1C,uBAAuB,EAAE,CAAC,CAAC,CAAC;MACvE,IAAI6B,WAAW,KAAK,KAAK,EACrBY,cAAc,GAAG,CAAC,CAAC;MACvB;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACY,IAAIE,EAAE,GAAGjB,SAAS,CAACkB,kBAAkB;QAAEA,kBAAkB,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,EAAE;MACnF,IAAIE,OAAO,GAAGlF,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEiF,kBAAkB,CAAC,EAAEH,cAAc,CAAC;MACxE,IAAIK,aAAa,GAAG,SAAAA,CAAUtC,GAAG,EAAE;QAC/B6B,iBAAiB,GAAG,IAAI;QACxBnB,WAAW,CAAC6B,MAAM,CAACvC,GAAG,CAAC;QACvBkB,SAAS,CAACsB,cAAc,CAACxC,GAAG,CAAC,GAAG,IAAI;MACxC,CAAC;MACD,KAAK,IAAIA,GAAG,IAAIqC,OAAO,EAAE;QACrB,IAAII,IAAI,GAAGR,cAAc,CAACjC,GAAG,CAAC;QAC9B,IAAI0C,IAAI,GAAGN,kBAAkB,CAACpC,GAAG,CAAC;QAClC;QACA,IAAIY,eAAe,CAAC+B,cAAc,CAAC3C,GAAG,CAAC,EACnC;QACJ;AAChB;AACA;QACgB,IAAIyC,IAAI,KAAKC,IAAI,EAAE;UACf;AACpB;AACA;AACA;UACoB,IAAIpF,iBAAiB,CAACmF,IAAI,CAAC,IAAInF,iBAAiB,CAACoF,IAAI,CAAC,EAAE;YACpD,IAAI,CAACnF,cAAc,CAACkF,IAAI,EAAEC,IAAI,CAAC,IAAIf,gBAAgB,EAAE;cACjDW,aAAa,CAACtC,GAAG,CAAC;YACtB,CAAC,MACI;cACD;AAC5B;AACA;AACA;cAC4BkB,SAAS,CAACO,aAAa,CAACzB,GAAG,CAAC,GAAG,IAAI;YACvC;UACJ,CAAC,MACI,IAAIyC,IAAI,KAAKxC,SAAS,EAAE;YACzB;YACAqC,aAAa,CAACtC,GAAG,CAAC;UACtB,CAAC,MACI;YACD;YACAU,WAAW,CAACkC,GAAG,CAAC5C,GAAG,CAAC;UACxB;QACJ,CAAC,MACI,IAAIyC,IAAI,KAAKxC,SAAS,IAAIS,WAAW,CAACmC,GAAG,CAAC7C,GAAG,CAAC,EAAE;UACjD;AACpB;AACA;AACA;UACoBsC,aAAa,CAACtC,GAAG,CAAC;QACtB,CAAC,MACI;UACD;AACpB;AACA;AACA;UACoBkB,SAAS,CAACO,aAAa,CAACzB,GAAG,CAAC,GAAG,IAAI;QACvC;MACJ;MACA;AACZ;AACA;AACA;MACYkB,SAAS,CAACQ,QAAQ,GAAGP,IAAI;MACzBD,SAAS,CAACkB,kBAAkB,GAAGH,cAAc;MAC7C;AACZ;AACA;MACY,IAAIf,SAAS,CAACI,QAAQ,EAAE;QACpBV,eAAe,GAAGzD,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEyD,eAAe,CAAC,EAAEqB,cAAc,CAAC;MAC7E;MACA,IAAI1C,eAAe,IAAIb,aAAa,CAACoE,qBAAqB,EAAE;QACxDjB,iBAAiB,GAAG,KAAK;MAC7B;MACA;AACZ;AACA;AACA;AACA;MACY,IAAIA,iBAAiB,IAAI,CAACN,WAAW,EAAE;QACnC5C,UAAU,CAACoE,IAAI,CAACC,KAAK,CAACrE,UAAU,EAAE1B,aAAa,CAAC,EAAE,EAAEC,MAAM,CAAC4E,cAAc,CAAChD,GAAG,CAAC,UAAUE,SAAS,EAAE;UAAE,OAAQ;YACzGA,SAAS,EAAEA,SAAS;YACpBC,OAAO,EAAE9B,QAAQ,CAAC;cAAE8D,IAAI,EAAEA;YAAK,CAAC,EAAEhC,OAAO;UAC7C,CAAC;QAAG,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;MACpB;IACJ,CAAC;IACD;AACR;AACA;AACA;AACA;AACA;IACQ,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzC,iBAAiB,EAAEyC,CAAC,EAAE,EAAE;MACxCD,OAAO,CAACC,CAAC,CAAC;IACd;IACA1B,eAAe,GAAGnC,QAAQ,CAAC,CAAC,CAAC,EAAEyD,eAAe,CAAC;IAC/C;AACR;AACA;AACA;AACA;IACQ,IAAIF,WAAW,CAACuC,IAAI,EAAE;MAClB,IAAIC,mBAAmB,GAAG,CAAC,CAAC;MAC5BxC,WAAW,CAACyC,OAAO,CAAC,UAAUnD,GAAG,EAAE;QAC/B,IAAIoD,cAAc,GAAG1E,aAAa,CAAC2E,aAAa,CAACrD,GAAG,CAAC;QACrD,IAAIoD,cAAc,KAAKnD,SAAS,EAAE;UAC9BiD,mBAAmB,CAAClD,GAAG,CAAC,GAAGoD,cAAc;QAC7C;MACJ,CAAC,CAAC;MACFzE,UAAU,CAACoE,IAAI,CAAC;QAAE/D,SAAS,EAAEkE;MAAoB,CAAC,CAAC;IACvD;IACA,IAAII,aAAa,GAAGC,OAAO,CAAC5E,UAAU,CAACH,MAAM,CAAC;IAC9C,IAAIe,eAAe,IACfe,KAAK,CAACkD,OAAO,KAAK,KAAK,IACvB,CAAC9E,aAAa,CAAC8C,sBAAsB,EAAE;MACvC8B,aAAa,GAAG,KAAK;IACzB;IACA/D,eAAe,GAAG,KAAK;IACvB,OAAO+D,aAAa,GAAGnE,OAAO,CAACR,UAAU,CAAC,GAAGC,OAAO,CAAC6E,OAAO,CAAC,CAAC;EAClE;EACA;AACJ;AACA;EACI,SAASC,SAASA,CAACzC,IAAI,EAAEK,QAAQ,EAAErC,OAAO,EAAE;IACxC,IAAIF,EAAE;IACN;IACA,IAAIK,KAAK,CAAC6B,IAAI,CAAC,CAACK,QAAQ,KAAKA,QAAQ,EACjC,OAAO1C,OAAO,CAAC6E,OAAO,CAAC,CAAC;IAC5B;IACA,CAAC1E,EAAE,GAAGL,aAAa,CAACiF,eAAe,MAAM,IAAI,IAAI5E,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACoE,OAAO,CAAC,UAAUS,KAAK,EAAE;MAAE,IAAI7E,EAAE;MAAE,OAAO,CAACA,EAAE,GAAG6E,KAAK,CAACC,cAAc,MAAM,IAAI,IAAI9E,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC2E,SAAS,CAACzC,IAAI,EAAEK,QAAQ,CAAC;IAAE,CAAC,CAAC;IACxNlC,KAAK,CAAC6B,IAAI,CAAC,CAACK,QAAQ,GAAGA,QAAQ;IAC/B,IAAI3C,UAAU,GAAGyB,cAAc,CAACnB,OAAO,EAAEgC,IAAI,CAAC;IAC9C,KAAK,IAAIjB,GAAG,IAAIZ,KAAK,EAAE;MACnBA,KAAK,CAACY,GAAG,CAAC,CAACyB,aAAa,GAAG,CAAC,CAAC;IACjC;IACA,OAAO9C,UAAU;EACrB;EACA,OAAO;IACHoB,UAAU,EAAEA,UAAU;IACtBK,cAAc,EAAEA,cAAc;IAC9BsD,SAAS,EAAEA,SAAS;IACpBxD,kBAAkB,EAAEA,kBAAkB;IACtC4D,QAAQ,EAAE,SAAAA,CAAA,EAAY;MAAE,OAAO1E,KAAK;IAAE;EAC1C,CAAC;AACL;AACA,SAASwC,sBAAsBA,CAACc,IAAI,EAAED,IAAI,EAAE;EACxC,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC1B,OAAOA,IAAI,KAAKC,IAAI;EACxB,CAAC,MACI,IAAIhF,eAAe,CAAC+E,IAAI,CAAC,EAAE;IAC5B,OAAO,CAAClF,cAAc,CAACkF,IAAI,EAAEC,IAAI,CAAC;EACtC;EACA,OAAO,KAAK;AAChB;AACA,SAASqB,eAAeA,CAACzC,QAAQ,EAAE;EAC/B,IAAIA,QAAQ,KAAK,KAAK,CAAC,EAAE;IAAEA,QAAQ,GAAG,KAAK;EAAE;EAC7C,OAAO;IACHA,QAAQ,EAAEA,QAAQ;IAClBG,aAAa,EAAE,CAAC,CAAC;IACjBe,cAAc,EAAE,CAAC,CAAC;IAClBJ,kBAAkB,EAAE,CAAC;EACzB,CAAC;AACL;AACA,SAAS/C,WAAWA,CAAA,EAAG;EACnB,IAAIN,EAAE;EACN,OAAOA,EAAE,GAAG,CAAC,CAAC,EACVA,EAAE,CAACtB,aAAa,CAACK,OAAO,CAAC,GAAGiG,eAAe,CAAC,IAAI,CAAC,EACjDhF,EAAE,CAACtB,aAAa,CAACM,MAAM,CAAC,GAAGgG,eAAe,CAAC,CAAC,EAC5ChF,EAAE,CAACtB,aAAa,CAACQ,KAAK,CAAC,GAAG8F,eAAe,CAAC,CAAC,EAC3ChF,EAAE,CAACtB,aAAa,CAACS,GAAG,CAAC,GAAG6F,eAAe,CAAC,CAAC,EACzChF,EAAE,CAACtB,aAAa,CAACU,IAAI,CAAC,GAAG4F,eAAe,CAAC,CAAC,EAC1ChF,EAAE,CAACtB,aAAa,CAACO,KAAK,CAAC,GAAG+F,eAAe,CAAC,CAAC,EAC3ChF,EAAE,CAACtB,aAAa,CAACW,IAAI,CAAC,GAAG2F,eAAe,CAAC,CAAC,EAC1ChF,EAAE;AACV;AAEA,SAAS6C,sBAAsB,EAAE1C,oBAAoB,EAAErB,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}