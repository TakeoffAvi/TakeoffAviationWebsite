{"ast":null,"code":"import { __assign } from 'tslib';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { env } from '../../utils/process.mjs';\nimport { featureDefinitions } from './definitions.mjs';\nimport { invariant } from 'hey-listen';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nvar featureNames = Object.keys(featureDefinitions);\nvar numFeatures = featureNames.length;\n/**\r\n * Load features via renderless components based on the provided MotionProps.\r\n */\nfunction useFeatures(props, visualElement, preloadedFeatures) {\n  var features = [];\n  var lazyContext = useContext(LazyContext);\n  if (!visualElement) return null;\n  /**\r\n   * If we're in development mode, check to make sure we're not rendering a motion component\r\n   * as a child of LazyMotion, as this will break the file-size benefits of using it.\r\n   */\n  if (env !== \"production\" && preloadedFeatures && lazyContext.strict) {\n    invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n  }\n  for (var i = 0; i < numFeatures; i++) {\n    var name_1 = featureNames[i];\n    var _a = featureDefinitions[name_1],\n      isEnabled = _a.isEnabled,\n      Component = _a.Component;\n    /**\r\n     * It might be possible in the future to use this moment to\r\n     * dynamically request functionality. In initial tests this\r\n     * was producing a lot of duplication amongst bundles.\r\n     */\n    if (isEnabled(props) && Component) {\n      features.push(React.createElement(Component, __assign({\n        key: name_1\n      }, props, {\n        visualElement: visualElement\n      })));\n    }\n  }\n  return features;\n}\nexport { useFeatures };","map":{"version":3,"names":["__assign","React","useContext","env","featureDefinitions","invariant","LazyContext","featureNames","Object","keys","numFeatures","length","useFeatures","props","visualElement","preloadedFeatures","features","lazyContext","strict","i","name_1","_a","isEnabled","Component","push","createElement","key"],"sources":["D:/Manish/TakeoffAviationWebsite/node_modules/framer-motion/dist/es/motion/features/use-features.mjs"],"sourcesContent":["import { __assign } from 'tslib';\r\nimport * as React from 'react';\r\nimport { useContext } from 'react';\r\nimport { env } from '../../utils/process.mjs';\r\nimport { featureDefinitions } from './definitions.mjs';\r\nimport { invariant } from 'hey-listen';\r\nimport { LazyContext } from '../../context/LazyContext.mjs';\r\n\r\nvar featureNames = Object.keys(featureDefinitions);\r\nvar numFeatures = featureNames.length;\r\n/**\r\n * Load features via renderless components based on the provided MotionProps.\r\n */\r\nfunction useFeatures(props, visualElement, preloadedFeatures) {\r\n    var features = [];\r\n    var lazyContext = useContext(LazyContext);\r\n    if (!visualElement)\r\n        return null;\r\n    /**\r\n     * If we're in development mode, check to make sure we're not rendering a motion component\r\n     * as a child of LazyMotion, as this will break the file-size benefits of using it.\r\n     */\r\n    if (env !== \"production\" && preloadedFeatures && lazyContext.strict) {\r\n        invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\r\n    }\r\n    for (var i = 0; i < numFeatures; i++) {\r\n        var name_1 = featureNames[i];\r\n        var _a = featureDefinitions[name_1], isEnabled = _a.isEnabled, Component = _a.Component;\r\n        /**\r\n         * It might be possible in the future to use this moment to\r\n         * dynamically request functionality. In initial tests this\r\n         * was producing a lot of duplication amongst bundles.\r\n         */\r\n        if (isEnabled(props) && Component) {\r\n            features.push(React.createElement(Component, __assign({ key: name_1 }, props, { visualElement: visualElement })));\r\n        }\r\n    }\r\n    return features;\r\n}\r\n\r\nexport { useFeatures };\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,QAAQ,OAAO;AAClC,SAASC,GAAG,QAAQ,yBAAyB;AAC7C,SAASC,kBAAkB,QAAQ,mBAAmB;AACtD,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,WAAW,QAAQ,+BAA+B;AAE3D,IAAIC,YAAY,GAAGC,MAAM,CAACC,IAAI,CAACL,kBAAkB,CAAC;AAClD,IAAIM,WAAW,GAAGH,YAAY,CAACI,MAAM;AACrC;AACA;AACA;AACA,SAASC,WAAWA,CAACC,KAAK,EAAEC,aAAa,EAAEC,iBAAiB,EAAE;EAC1D,IAAIC,QAAQ,GAAG,EAAE;EACjB,IAAIC,WAAW,GAAGf,UAAU,CAACI,WAAW,CAAC;EACzC,IAAI,CAACQ,aAAa,EACd,OAAO,IAAI;EACf;AACJ;AACA;AACA;EACI,IAAIX,GAAG,KAAK,YAAY,IAAIY,iBAAiB,IAAIE,WAAW,CAACC,MAAM,EAAE;IACjEb,SAAS,CAAC,KAAK,EAAE,kJAAkJ,CAAC;EACxK;EACA,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,WAAW,EAAES,CAAC,EAAE,EAAE;IAClC,IAAIC,MAAM,GAAGb,YAAY,CAACY,CAAC,CAAC;IAC5B,IAAIE,EAAE,GAAGjB,kBAAkB,CAACgB,MAAM,CAAC;MAAEE,SAAS,GAAGD,EAAE,CAACC,SAAS;MAAEC,SAAS,GAAGF,EAAE,CAACE,SAAS;IACvF;AACR;AACA;AACA;AACA;IACQ,IAAID,SAAS,CAACT,KAAK,CAAC,IAAIU,SAAS,EAAE;MAC/BP,QAAQ,CAACQ,IAAI,CAACvB,KAAK,CAACwB,aAAa,CAACF,SAAS,EAAEvB,QAAQ,CAAC;QAAE0B,GAAG,EAAEN;MAAO,CAAC,EAAEP,KAAK,EAAE;QAAEC,aAAa,EAAEA;MAAc,CAAC,CAAC,CAAC,CAAC;IACrH;EACJ;EACA,OAAOE,QAAQ;AACnB;AAEA,SAASJ,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}