{"ast":null,"code":"import { __read } from 'tslib';\nimport { useState, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { isBrowser } from './is-browser.mjs';\n\n// Does this device prefer reduced motion? Returns `null` server-side.\nvar prefersReducedMotion = {\n  current: null\n};\nvar hasDetected = false;\nfunction initPrefersReducedMotion() {\n  hasDetected = true;\n  if (!isBrowser) return;\n  if (window.matchMedia) {\n    var motionMediaQuery_1 = window.matchMedia(\"(prefers-reduced-motion)\");\n    var setReducedMotionPreferences = function () {\n      return prefersReducedMotion.current = motionMediaQuery_1.matches;\n    };\n    motionMediaQuery_1.addListener(setReducedMotionPreferences);\n    setReducedMotionPreferences();\n  } else {\n    prefersReducedMotion.current = false;\n  }\n}\n/**\r\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\r\n *\r\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\r\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\r\n *\r\n * It will actively respond to changes and re-render your components with the latest setting.\r\n *\r\n * ```jsx\r\n * export function Sidebar({ isOpen }) {\r\n *   const shouldReduceMotion = useReducedMotion()\r\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\r\n *\r\n *   return (\r\n *     <motion.div animate={{\r\n *       opacity: isOpen ? 1 : 0,\r\n *       x: isOpen ? 0 : closedX\r\n *     }} />\r\n *   )\r\n * }\r\n * ```\r\n *\r\n * @return boolean\r\n *\r\n * @public\r\n */\nfunction useReducedMotion() {\n  /**\r\n   * Lazy initialisation of prefersReducedMotion\r\n   */\n  !hasDetected && initPrefersReducedMotion();\n  var _a = __read(useState(prefersReducedMotion.current), 1),\n    shouldReduceMotion = _a[0];\n  /**\r\n   * TODO See if people miss automatically updating shouldReduceMotion setting\r\n   */\n  return shouldReduceMotion;\n}\nfunction useReducedMotionConfig() {\n  var reducedMotionPreference = useReducedMotion();\n  var reducedMotion = useContext(MotionConfigContext).reducedMotion;\n  if (reducedMotion === \"never\") {\n    return false;\n  } else if (reducedMotion === \"always\") {\n    return true;\n  } else {\n    return reducedMotionPreference;\n  }\n}\nexport { useReducedMotion, useReducedMotionConfig };","map":{"version":3,"names":["__read","useState","useContext","MotionConfigContext","isBrowser","prefersReducedMotion","current","hasDetected","initPrefersReducedMotion","window","matchMedia","motionMediaQuery_1","setReducedMotionPreferences","matches","addListener","useReducedMotion","_a","shouldReduceMotion","useReducedMotionConfig","reducedMotionPreference","reducedMotion"],"sources":["E:/TakeoffAviationWebsite/node_modules/framer-motion/dist/es/utils/use-reduced-motion.mjs"],"sourcesContent":["import { __read } from 'tslib';\r\nimport { useState, useContext } from 'react';\r\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\r\nimport { isBrowser } from './is-browser.mjs';\r\n\r\n// Does this device prefer reduced motion? Returns `null` server-side.\r\nvar prefersReducedMotion = { current: null };\r\nvar hasDetected = false;\r\nfunction initPrefersReducedMotion() {\r\n    hasDetected = true;\r\n    if (!isBrowser)\r\n        return;\r\n    if (window.matchMedia) {\r\n        var motionMediaQuery_1 = window.matchMedia(\"(prefers-reduced-motion)\");\r\n        var setReducedMotionPreferences = function () {\r\n            return (prefersReducedMotion.current = motionMediaQuery_1.matches);\r\n        };\r\n        motionMediaQuery_1.addListener(setReducedMotionPreferences);\r\n        setReducedMotionPreferences();\r\n    }\r\n    else {\r\n        prefersReducedMotion.current = false;\r\n    }\r\n}\r\n/**\r\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\r\n *\r\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\r\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\r\n *\r\n * It will actively respond to changes and re-render your components with the latest setting.\r\n *\r\n * ```jsx\r\n * export function Sidebar({ isOpen }) {\r\n *   const shouldReduceMotion = useReducedMotion()\r\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\r\n *\r\n *   return (\r\n *     <motion.div animate={{\r\n *       opacity: isOpen ? 1 : 0,\r\n *       x: isOpen ? 0 : closedX\r\n *     }} />\r\n *   )\r\n * }\r\n * ```\r\n *\r\n * @return boolean\r\n *\r\n * @public\r\n */\r\nfunction useReducedMotion() {\r\n    /**\r\n     * Lazy initialisation of prefersReducedMotion\r\n     */\r\n    !hasDetected && initPrefersReducedMotion();\r\n    var _a = __read(useState(prefersReducedMotion.current), 1), shouldReduceMotion = _a[0];\r\n    /**\r\n     * TODO See if people miss automatically updating shouldReduceMotion setting\r\n     */\r\n    return shouldReduceMotion;\r\n}\r\nfunction useReducedMotionConfig() {\r\n    var reducedMotionPreference = useReducedMotion();\r\n    var reducedMotion = useContext(MotionConfigContext).reducedMotion;\r\n    if (reducedMotion === \"never\") {\r\n        return false;\r\n    }\r\n    else if (reducedMotion === \"always\") {\r\n        return true;\r\n    }\r\n    else {\r\n        return reducedMotionPreference;\r\n    }\r\n}\r\n\r\nexport { useReducedMotion, useReducedMotionConfig };\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAC5C,SAASC,mBAAmB,QAAQ,oCAAoC;AACxE,SAASC,SAAS,QAAQ,kBAAkB;;AAE5C;AACA,IAAIC,oBAAoB,GAAG;EAAEC,OAAO,EAAE;AAAK,CAAC;AAC5C,IAAIC,WAAW,GAAG,KAAK;AACvB,SAASC,wBAAwBA,CAAA,EAAG;EAChCD,WAAW,GAAG,IAAI;EAClB,IAAI,CAACH,SAAS,EACV;EACJ,IAAIK,MAAM,CAACC,UAAU,EAAE;IACnB,IAAIC,kBAAkB,GAAGF,MAAM,CAACC,UAAU,CAAC,0BAA0B,CAAC;IACtE,IAAIE,2BAA2B,GAAG,SAAAA,CAAA,EAAY;MAC1C,OAAQP,oBAAoB,CAACC,OAAO,GAAGK,kBAAkB,CAACE,OAAO;IACrE,CAAC;IACDF,kBAAkB,CAACG,WAAW,CAACF,2BAA2B,CAAC;IAC3DA,2BAA2B,CAAC,CAAC;EACjC,CAAC,MACI;IACDP,oBAAoB,CAACC,OAAO,GAAG,KAAK;EACxC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASS,gBAAgBA,CAAA,EAAG;EACxB;AACJ;AACA;EACI,CAACR,WAAW,IAAIC,wBAAwB,CAAC,CAAC;EAC1C,IAAIQ,EAAE,GAAGhB,MAAM,CAACC,QAAQ,CAACI,oBAAoB,CAACC,OAAO,CAAC,EAAE,CAAC,CAAC;IAAEW,kBAAkB,GAAGD,EAAE,CAAC,CAAC,CAAC;EACtF;AACJ;AACA;EACI,OAAOC,kBAAkB;AAC7B;AACA,SAASC,sBAAsBA,CAAA,EAAG;EAC9B,IAAIC,uBAAuB,GAAGJ,gBAAgB,CAAC,CAAC;EAChD,IAAIK,aAAa,GAAGlB,UAAU,CAACC,mBAAmB,CAAC,CAACiB,aAAa;EACjE,IAAIA,aAAa,KAAK,OAAO,EAAE;IAC3B,OAAO,KAAK;EAChB,CAAC,MACI,IAAIA,aAAa,KAAK,QAAQ,EAAE;IACjC,OAAO,IAAI;EACf,CAAC,MACI;IACD,OAAOD,uBAAuB;EAClC;AACJ;AAEA,SAASJ,gBAAgB,EAAEG,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}